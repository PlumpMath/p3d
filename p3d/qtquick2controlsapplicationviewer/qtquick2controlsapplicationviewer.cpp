// checksum 0x7cc2 version 0x90001
/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ControlsApplicationViewer is a convenience class.
  QML paths are handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/
#include "qtquick2controlsapplicationviewer.h"

#include <QCoreApplication>
#include <QDir>
#include <QQmlComponent>


QString QtQuick2ControlsApplicationViewer::adjustPath(const QString &path)
{
#if defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path))
        return QStringLiteral("%1/../Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_BLACKBERRY)
    if (!QDir::isAbsolutePath(path))
        return QStringLiteral("app/native/%1").arg(path);
#elif !defined(Q_OS_ANDROID)
    QString pathInInstallDir =
            QStringLiteral("%1/../%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
    pathInInstallDir =
            QStringLiteral("%1/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
#endif
    return path;
}

QtQuick2ControlsApplicationViewer::QtQuick2ControlsApplicationViewer(QObject *parent) : QObject(parent)
{

}

QtQuick2ControlsApplicationViewer::~QtQuick2ControlsApplicationViewer()
{
    delete window;
}

void QtQuick2ControlsApplicationViewer::setMainQmlFile(const QString &file)
{
    mainQmlFile = adjustPath(file);

    QQmlComponent component(&engine);

    QObject::connect(&engine, SIGNAL(quit()), QCoreApplication::instance(), SLOT(quit()));

#ifdef Q_OS_ANDROID
    component.loadUrl(QUrl(QStringLiteral("assets:/")+mainQmlFile));
#else
    component.loadUrl(QUrl::fromLocalFile(mainQmlFile));
#endif

    if (!component.isReady())
        qWarning("%s", qPrintable(component.errorString()));

    window = qobject_cast<QQuickWindow *>(component.create());
    if (!window)
        qFatal("Error: Your root item has to be a Window.");

    emit windowReady();

    engine.setIncubationController(window->incubationController());
}

void QtQuick2ControlsApplicationViewer::addImportPath(const QString &path)
{
    engine.addImportPath(adjustPath(path));
}

void QtQuick2ControlsApplicationViewer::show()
{
    if (window)
        window->show();
}
